<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>966</x>
      <y>384</y>
      <w>156</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;

--

#data : Type

--
+ Node() : constructor
+ Node&lt;Type&gt;(Type) : constructor

+ getData() : Type
+ setData(Type) : void

bg=green
transparency=80</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>1014</y>
      <w>276</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;
--

- next : Node&lt;Type&gt;*

--
+ LinearNode&lt;Type&gt;(Type) : constructor
+ LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;) : constructor
+ LinearNode(Type data, LinearNode&lt;Type&gt; * next) : constructor

+ getNext() : Node&lt;Type&gt; *
+ setNext(Node&lt;Type&gt; *) : void

bg=blue
transparency=90
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1266</x>
      <y>1002</y>
      <w>180</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--

# size : int

--
*List Structure Methods*
+ add(Type item) : void
+ addAtIndex(int index, Type item) : void
+ remove(Type item) : Type
+ getFromIndex(int index) : Type

*List Accessors*
+ getSize() const : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *


bg=red
transparency=70
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1170</x>
      <y>1068</y>
      <w>108</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0
</panel_attributes>
    <additional_attributes>160.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1494</x>
      <y>930</y>
      <w>210</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>ArrayList&lt;Type&gt;
--

- size : int
- internalArray : [Type]

--
+ Array&lt;Type&gt;(int) : constructor
+ Array&lt;Type&gt;(Array&lt;Type&gt;) : copy constructor

+ getSize() : int
+ setAtIndex(int, Type) : void
+ getFromIndex(int) : Type

+ operator [] : Type/Type&amp;
+ operator =: Type&amp;
+ ~Array() : destructor

bg=cyan
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1032</x>
      <y>492</y>
      <w>42</w>
      <h>534</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=public</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;870.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1266</x>
      <y>1194</y>
      <w>180</w>
      <h>198</h>
    </coordinates>
    <panel_attributes>LinkedList
--

# front : LinearNode&lt;Type&gt;*
# end : LinearNode&lt;Type&gt;*
--
+ LinkedList() : constructor
+ ~LinkedList() : destructor

*List Structure methods*
+ add(Type item) : void
+ addAtIndex(int index, Type item) : void
+ remove(int index): Type
+ getFromIndex(int index) : Type
+ contains(Type): bool
+ setAtIndex(int, Type) : Type

*List Accessors*
+ getSize() const : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getEnd() : LinearNode&lt;Type&gt;*





bg=red
transparency=60</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1170</x>
      <y>1440</y>
      <w>180</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--

--
+ Stack() : constructor
+ ~Stack() : destructor

*Stack Methods*
+ push(Type) : void
+ pop() : Type
+ peek() : Type

*List Structure methods*
+ add(Type item) : void
+ addAtIndex(int index, Type item) : void
+ remove(int index) : Type
+ getFromIndex(int index) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() const : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getEnd() : LinearNode&lt;Type&gt;*





bg=red
transparency=40</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1356</x>
      <y>1440</y>
      <w>174</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Queue
--

--
+ Queue() : constructor
+ ~Queue() : destructor

*Queue Methods*
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

*List Structure methods*
+ add(Type item) : void
+ addAtIndex(int index, Type item) : void
+ remove(int index) : Type
+ getFromIndex(int index) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() const : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getEnd() : LinearNode&lt;Type&gt;*



bg=red
transparency=50</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1434</x>
      <y>1386</y>
      <w>42</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=public</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1344</x>
      <y>1152</y>
      <w>42</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=public</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1266</x>
      <y>1386</y>
      <w>42</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=public</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>876</x>
      <y>1092</y>
      <w>306</w>
      <h>444</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>490.0;710.0;10.0;710.0;10.0;10.0;40.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>1080</y>
      <w>780</w>
      <h>630</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>1100.0;860.0;1280.0;860.0;1280.0;1030.0;10.0;1030.0;10.0;10.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>882</x>
      <y>1104</y>
      <w>396</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>640.0;290.0;10.0;290.0;10.0;10.0;30.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1944</x>
      <y>1314</y>
      <w>192</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>LinearTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1944</x>
      <y>1440</y>
      <w>192</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>HashtableTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1944</x>
      <y>1194</y>
      <w>192</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>GraphTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1944</x>
      <y>1074</y>
      <w>192</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>TreeTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>1584</y>
      <w>192</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>CrimeData
--
- Too Many
--
+ CrimeData() : constructor
+ CrimeData(string) : constructor
+ getXXX() : various
+ == :bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>1464</y>
      <w>192</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>MusicData
--
- Too Many
--
+ MusicData() : constructor
+ MusicData(string) : constructor
+ getXXX() : various
+ == :bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1944</x>
      <y>1560</y>
      <w>192</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>AlgorithmTester
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>1356</y>
      <w>516</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=Aggregation</panel_attributes>
    <additional_attributes>840.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1044</x>
      <y>1392</y>
      <w>912</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=Aggregation</panel_attributes>
    <additional_attributes>1500.0;10.0;1160.0;10.0;940.0;480.0;10.0;480.0;10.0;280.0;210.0;280.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1524</x>
      <y>1374</y>
      <w>432</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=Aggregation</panel_attributes>
    <additional_attributes>700.0;10.0;360.0;10.0;10.0;330.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>432</x>
      <y>1014</y>
      <w>426</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--

# DoubleNode&lt;Type&gt; * : next
# DoubleNode&lt;Type&gt; * : previous

--
+ DoubleNode() : constructor
+ DoubleNode(Type data) : constructor
+ DoubleNode(Type data, DoubleNode&lt;Type&gt; * previous, DoubleNode&lt;Type&gt; * next) : constructor

+ setNext(DoubleNode&lt;Type&gt; *) : void
+ getNext() : DoubleNode&lt;Type&gt; * : Type

+ setPrevious(DoubleNode&lt;Type&gt; *) : void
+ getPrevious() : DoubleNode&lt;Type&gt; * : Type

bg=green

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>1230</y>
      <w>216</w>
      <h>198</h>
    </coordinates>
    <panel_attributes>CircularList&lt;Type&gt;
--

- front : DoubleNode&lt;Type&gt; *
- end : DoubleNode&lt;Type&gt; *
- size : int

--
+ CircularList() : constructor
+ ~CircularList() : destructor
+ add(Type item) : void
+ addAtIndex(int index, Type item) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type item) : Type
+ getFromtIndex(int index) : Type

+ getSize() const : int

- findNode(int index) : DoubleNode&lt;Type&gt; *


bg=#280c7a90</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>642</x>
      <y>492</y>
      <w>402</w>
      <h>534</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
m1=public</panel_attributes>
    <additional_attributes>610.0;10.0;610.0;850.0;10.0;850.0;10.0;870.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>384</x>
      <y>1086</y>
      <w>138</w>
      <h>258</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>80.0;10.0;10.0;10.0;10.0;410.0;210.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1032</y>
      <w>372</w>
      <h>384</h>
    </coordinates>
    <panel_attributes>NonLinear :: Graph
--
- *MAXIMUM : int
- adjecencyMatrix : bool[][]
- weightCostMatrix : int[][]
- graphData : Type []
- vertexCount : int

--

Graph() : constructor

+ addVertex(const Type&amp; value) : void

*Connect vertices*
+ addEdge(int source, int target) : void
+ addEdgeUndirected(int source, int target) : void
+ addEdgeCost(int source, int target, int cost) : void

*Disconnect vertices*
+ removeEdge(int source, int target) : void
+ removeEdgeUndirected(int source, int target) : void
+ removeEdgeCost(int source, int target) : void

*Accessors*
+ operator [] (int vertex) : Type&amp;
+ operator [] (int vertex) : Type const
+ size const : int

*Check connections*
+ hasUndirectedConnection(int source, int target) : const bool
+ areConnected(int source, int target) : cost bool
+ neighbors(int vertex) : const std::set&lt;int&gt;

*Traversals*
+ depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ breadthFristTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
- depthFristTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool markedVertices[]) : void


bg=green
transparency=90
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1164</x>
      <y>702</y>
      <w>240</w>
      <h>222</h>
    </coordinates>
    <panel_attributes>BinaryTreeNode&lt;Type&gt;
--

- BinaryTreeNode&lt;Type&gt; * : root
- BinaryTreeNode&lt;Type&gt; * : rightChild
- BinaryTreeNode&lt;Type&gt; * : leftChild

--

+ BinaryTreeNode() : constructor
+ BinaryTreeNode(Type data) : constructor
+ BinaryTreeNode(Type data, 
					  BinaryTreeNode&lt;Type&gt; * root,
					  BinaryTreeNode&lt;Type&gt; * rightChild,
					  BinaryTreeNode&lt;Type&gt; * leftChild)

+ setRoot(BinaryTreeNode&lt;Type&gt; *) : void
+ setRightChild(BinaryTreeNode&lt;Type&gt; *) : void
+ setLeftChild(BinaryTreeNode&lt;Type&gt; *) : void
+ getRoot() : Type
+ getRightChild() : Type
+ getLeftChild() : Type

bg=cyan
transparency=90



						</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>618</x>
      <y>0</y>
      <w>228</w>
      <h>204</h>
    </coordinates>
    <panel_attributes>Tree&lt;Type&gt;
--

#root : BinaryTreeNode&lt;Type&gt;

--
*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Data Methods*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

bg=cyan
transparency=75</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>528</x>
      <y>324</y>
      <w>348</w>
      <h>378</h>
    </coordinates>
    <panel_attributes>BinarySearchTree&lt;Type&gt;
--
*Structure*
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : constructor
# destroyTree() : void

*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool
+ getRoot() : binaryTreeNode&lt;Type&gt;*

*Recursive Information Helpers*
# calculateSize(BinaryTreeNode&lt;Type&gt; * startNode) : int
# calculateHeight(BinaryTreeNode&lt;Type&gt; * startNode) : int
# isBalaned(BinaryTreeNode&lt;Type&gt; * startNode) : bool
# isComplete(BinaryTreeNode&lt;Type&gt; * startNode, int index, int size) : bool

*Data Methods*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

*Recursive Data Helpers*
# remoceNode(BinaryTreeNode&lt;Type&gt; * removeMe) : void

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Recursive Traversal Helpers*
# inOrderTraversal(BinaryTreeNode&lt;Type&gt; * inStart) : void
# preOrderTraversal(BinaryTreeNode&lt;Type&gt; * preStart) : void
# postOrderTraversal(BinaryTreeNode&lt;Type&gt; * postStart) : void
# getRightMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *
# getLeftMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *

bg=cyan
transparency=60</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1068</x>
      <y>492</y>
      <w>222</w>
      <h>222</h>
    </coordinates>
    <panel_attributes>public
lt=&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;120.0;350.0;350.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>840</x>
      <y>102</y>
      <w>696</w>
      <h>732</h>
    </coordinates>
    <panel_attributes>0..n
lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>940.0;1200.0;1140.0;1200.0;910.0;450.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>726</x>
      <y>198</y>
      <w>42</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>public
lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>792</y>
      <w>378</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>AVLTree&lt;Type&gt;
--
- leftRotation(BinaryTreeNode&lt;Type&gt; * parent) : BinaryTreeNode&lt;Type&gt;*
- rightRotation(BinaryTreeNode&lt;Type&gt; * parent) : BinaryTreeNode&lt;Type&gt;*
- leftRightRotation(BinaryTreeNode&lt;Type&gt; * parent) : BinaryTreeNode&lt;Type&gt;*
- rightLeftRotation(BinaryTreeNode&lt;Type&gt; * parent) : BinaryTreeNode&lt;Type&gt;*

- balanceSubTree(BinaryTreeNode&lt;Type&gt; * parent) : BinaryTreeNode&lt;Type&gt;* 

- insertNode(BinaryTreeNode&lt;Type&gt; * parent, Type value) : BinaryTreeNode&lt;Type&gt;*
- removeNode(BinaryTreeNode&lt;Type&gt; * parent, Type value) : BinaryTreeNode&lt;Type&gt;*

- heightDifference(BinaryTreeNode&lt;Type&gt; * parent) : int

+ AVLTree() : contructor
+ insert(Type item) : void
+ remove(Type value) : void 

bg=blue
transparency=95</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>672</x>
      <y>696</y>
      <w>42</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>public
lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>210</y>
      <w>630</w>
      <h>606</h>
    </coordinates>
    <panel_attributes>0..n
lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>890.0;990.0;1030.0;990.0;820.0;310.0;220.0;10.0;10.0;340.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>882</x>
      <y>252</y>
      <w>588</w>
      <h>636</h>
    </coordinates>
    <panel_attributes>0..n
lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>870.0;890.0;960.0;890.0;770.0;270.0;220.0;10.0;50.0;310.0;10.0;1040.0</additional_attributes>
  </element>
</diagram>
